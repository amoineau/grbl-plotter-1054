<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cbPort.ToolTip" xml:space="preserve">
    <value>Selecione porta serial livre</value>
  </data>
  <data name="cbBaud.ToolTip" xml:space="preserve">
    <value>Selecionar velocidade</value>
  </data>
  <data name="btnOpenPort.Text" xml:space="preserve">
    <value>Abrir</value>
  </data>
  <data name="btnOpenPort.ToolTip" xml:space="preserve">
    <value>Abra a porta COM selecionada com a velocidade selecionada</value>
  </data>
  <data name="btnScanPort.Text" xml:space="preserve">
    <value>Procurar</value>
  </data>
  <data name="btnScanPort.ToolTip" xml:space="preserve">
    <value>Procure portas gratuitas</value>
  </data>
  <data name="btnClear.Text" xml:space="preserve">
    <value>Limpa</value>
  </data>
  <data name="btnClear.ToolTip" xml:space="preserve">
    <value>Limpar lista acima</value>
  </data>
  <data name="btnSend.Text" xml:space="preserve">
    <value>Executar</value>
  </data>
  <data name="btnSend.ToolTip" xml:space="preserve">
    <value>Pressione para enviar o comando</value>
  </data>
  <data name="btnGRBLCommand0.ToolTip" xml:space="preserve">
    <value>Ajuda: Obter lista de todos os comandos do GRBL</value>
  </data>
  <data name="btnGRBLCommand1.ToolTip" xml:space="preserve">
    <value>Visualizar configurações do Grbl</value>
  </data>
  <data name="btnGRBLCommand2.ToolTip" xml:space="preserve">
    <value>Visualizar parâmetros do código g</value>
  </data>
  <data name="btnGRBLCommand3.ToolTip" xml:space="preserve">
    <value>Exibir blocos de inicialização</value>
  </data>
  <data name="btnGRBLCommand4.ToolTip" xml:space="preserve">
    <value>Matar bloqueio de alarme</value>
  </data>
  <data name="lblSrPos.ToolTip" xml:space="preserve">
    <value>Posição de trabalho</value>
  </data>
  <data name="label2.ToolTip" xml:space="preserve">
    <value>Estado do buffer (precisa ser ativado via $ 10 = 2)</value>
  </data>
  <data name="lblSrBf.ToolTip" xml:space="preserve">
    <value>Estado do buffer (precisa ser ativado via $ 10 = 2)</value>
  </data>
  <data name="label4.ToolTip" xml:space="preserve">
    <value>Alimentação atual (mm / min) e velocidade (RPM)</value>
  </data>
  <data name="lblSrFS.ToolTip" xml:space="preserve">
    <value>Alimentação atual (mm / min) e velocidade (RPM)</value>
  </data>
  <data name="lblSrPn.ToolTip" xml:space="preserve">
    <value>Estado do pino de entrada para XYZ, sonda, porta, retenção, reinicialização suave, início do ciclo</value>
  </data>
  <data name="label7.ToolTip" xml:space="preserve">
    <value>Estado do pino de entrada para XYZ, sonda, porta, retenção, reinicialização suave, início do ciclo</value>
  </data>
  <data name="lblSrOv.ToolTip" xml:space="preserve">
    <value>Substituir valores para alimentação, corredeiras e velocidade em%</value>
  </data>
  <data name="label9.ToolTip" xml:space="preserve">
    <value>Substituir valores para alimentação, corredeiras e velocidade em%</value>
  </data>
  <data name="lblSrA.ToolTip" xml:space="preserve">
    <value>Estado do acessório 
S = eixo CW, 
C = eixo CCW, 
F = corante flutuante, 
M = líquido refrigerante</value>
  </data>
  <data name="label11.ToolTip" xml:space="preserve">
    <value>Estado do acessório 
S = eixo CW, 
C = eixo CCW, 
F = corante flutuante, 
M = líquido refrigerante</value>
  </data>
  <data name="lblSrLn.ToolTip" xml:space="preserve">
    <value>Número da linha (precisa ser ativado em config.h)</value>
  </data>
  <data name="label13.ToolTip" xml:space="preserve">
    <value>Número da linha (precisa ser ativado em config.h)</value>
  </data>
  <data name="btnCheckGRBL.Text" xml:space="preserve">
    <value>Verificar GRBL</value>
  </data>
  <data name="btnCheckGRBL.ToolTip" xml:space="preserve">
    <value>Verifique a configuração do GRBL para obter os limites máximos e mínimos</value>
  </data>
  <data name="btnGRBLReset.ToolTip" xml:space="preserve">
    <value>Redefinição suave via CTRL-X</value>
  </data>
  <data name="btnGRBLHardReset.ToolTip" xml:space="preserve">
    <value>Tente redefinir por DTR / RTS O</value>
  </data>
  <data name="btnGRBLCmndParser.ToolTip" xml:space="preserve">
    <value>Exibir estado do analisador de código g</value>
  </data>
  <data name="btnGRBLCmndBuild.ToolTip" xml:space="preserve">
    <value>Exibir informações de compilação</value>
  </data>
  <data name="cBStatus.Text" xml:space="preserve">
    <value>Mostrar relatório de status em tempo real</value>
  </data>
  <data name="cBStatus.ToolTip" xml:space="preserve">
    <value>Mostrar os relatórios de status GRBL originais recebidos</value>
  </data>
  <data name="lblSrState.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="cBStatus1.ToolTip" xml:space="preserve">
    <value>Mostrar comandos enviados e processados ​​durante a transmissão</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Relatório de status em tempo real</value>
  </data>
</root>
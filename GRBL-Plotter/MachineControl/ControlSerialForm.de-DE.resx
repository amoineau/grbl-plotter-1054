<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cbPort.ToolTip" xml:space="preserve">
    <value>Wählen Sie eine freie serielle Schnittstelle</value>
  </data>
  <data name="cbBaud.ToolTip" xml:space="preserve">
    <value>Geschwindigkeit auswählen</value>
  </data>
  <data name="btnOpenPort.Text" xml:space="preserve">
    <value>Öffnen</value>
  </data>
  <data name="btnOpenPort.ToolTip" xml:space="preserve">
    <value>Öffne den ausgewählten COM Port mit ausgewählter Geschwindigkeit
Oder schließt den offenen COM Port</value>
  </data>
  <data name="btnScanPort.ToolTip" xml:space="preserve">
    <value>Suche nach freien COM Ports</value>
  </data>
  <data name="btnClear.ToolTip" xml:space="preserve">
    <value>Lösche Historie</value>
  </data>
  <data name="btnSend.ToolTip" xml:space="preserve">
    <value>Sende Befehl (geht auch mit 'Enter')</value>
  </data>
  <data name="btnGRBLCommand0.ToolTip" xml:space="preserve">
    <value>Listet alle GRBL Befehle</value>
  </data>
  <data name="btnGRBLCommand1.ToolTip" xml:space="preserve">
    <value>Listet die Grbl Settings</value>
  </data>
  <data name="btnGRBLCommand2.ToolTip" xml:space="preserve">
    <value>Anzeigen von G-code-Parametern</value>
  </data>
  <data name="btnGRBLCommand3.ToolTip" xml:space="preserve">
    <value>Listet die Startup Blocks</value>
  </data>
  <data name="btnGRBLCommand4.ToolTip" xml:space="preserve">
    <value>Alarmsperre aufheben</value>
  </data>
  <data name="lblSrPos.ToolTip" xml:space="preserve">
    <value>Koordinaten der 'Work Position'</value>
  </data>
  <data name="label2.ToolTip" xml:space="preserve">
    <value>Pufferstatus (muss über $ 10 = 2 aktiviert werden)</value>
  </data>
  <data name="lblSrBf.ToolTip" xml:space="preserve">
    <value>Pufferstatus (muss über $ 10 = 2 aktiviert werden)</value>
  </data>
  <data name="label4.ToolTip" xml:space="preserve">
    <value>Aktueller Vorschub (mm / min) und Geschwindigkeit (U / min)</value>
  </data>
  <data name="lblSrFS.ToolTip" xml:space="preserve">
    <value>Aktueller Vorschub (mm / min) und Geschwindigkeit (U / min)</value>
  </data>
  <data name="lblSrPn.ToolTip" xml:space="preserve">
    <value>Eingangs-Pin-Status für XYZ, Sonde, Tür, Halten, Soft-Reset, Zyklusstart</value>
  </data>
  <data name="label7.ToolTip" xml:space="preserve">
    <value>Eingangs-Pin-Status für XYZ, Sonde, Tür, Halten, Soft-Reset, Zyklusstart</value>
  </data>
  <data name="lblSrOv.ToolTip" xml:space="preserve">
    <value>Werte für Vorschub und Geschwindigkeit in % überschreiben</value>
  </data>
  <data name="label9.ToolTip" xml:space="preserve">
    <value>Werte für Vorschub und Geschwindigkeit in % überschreiben</value>
  </data>
  <data name="lblSrLn.ToolTip" xml:space="preserve">
    <value>Zeilennummer (muss in config.h aktiviert sein)</value>
  </data>
  <data name="label13.ToolTip" xml:space="preserve">
    <value>Zeilennummer (muss in config.h aktiviert sein)</value>
  </data>
  <data name="btnCheckGRBL.ToolTip" xml:space="preserve">
    <value>Überprüfen Sie das GRBL-Setup auf Höchst- und Mindestwerte
Nicht für GRBL Vers. &lt;1,0</value>
  </data>
  <data name="btnGRBLReset.ToolTip" xml:space="preserve">
    <value>Soft Reset über STRG-X</value>
  </data>
  <data name="btnGRBLHardReset.ToolTip" xml:space="preserve">
    <value>Versuchen Sie es mit einem harten Reset über DTR / RTS
Erfolg hängt von der Hardware ab (DTR, RTS verkabelt?)</value>
  </data>
  <data name="btnGRBLCmndParser.ToolTip" xml:space="preserve">
    <value>Zeigen Sie den Status des G-code-Parsers an</value>
  </data>
  <data name="btnGRBLCmndBuild.ToolTip" xml:space="preserve">
    <value>Build-Informationen anzeigen</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="cbStatus.Size" type="System.Drawing.Size, System.Drawing">
    <value>183, 17</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Echtzeit Status Report</value>
  </data>
  <data name="cBStatus.Text" xml:space="preserve">
    <value>Zeige den Echtzeit Status Report</value>
  </data>
  <data name="cBStatus.ToolTip" xml:space="preserve">
    <value>Zeige die original empfangenen GRBL Status Reports</value>
  </data>
  <data name="cBStatus1.ToolTip" xml:space="preserve">
    <value>Gesendete und verarbeitete Befehle beim Streaming anzeigen</value>
  </data>
</root>